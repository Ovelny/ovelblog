<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[ovelny]]></title>
    <link href="https://ovelny.sh/atom.xml" rel="self"/>
    <link href="https://ovelny.sh/"/>
    <icon>https://ovelny.sh/static/favicon.ico</icon>
    <logo>https://ovelny.sh/static/images/ovelny-minimal-logo.jpg</logo>
    <updated>2020-04-15T00:00:00+02:00</updated>
    <id>https://ovelny.sh/</id>
    <author>
        <name><![CDATA[ovelny]]></name>
    </author>

    
    <entry>
        <title type="html"><![CDATA[Hack The Box writeup: Nibbles]]></title>
        <link href="https://ovelny.sh/blog/hack-the-box-writeup-nibbles/"/>
        <updated>2020-04-15T00:00:00+02:00</updated>
        <id>https://ovelny.sh/blog/hack-the-box-writeup-nibbles/</id>
        <content type="html"><![CDATA[<h2>Full walkthrough</h2>
<p>As with everything, let’s start with enumeration on this target. A full nmap scan doesn't expose much with this box: only the SSH and HTTP ports are open, the latter being used by apache.
The target's address (http://10.10.10.75) just leads to a "hello world" HTML page. By checking the source code however, we can see an HTML comment leading to another critical piece present on this target : a CMS called nibbleblog.</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542053507_1.png" /></p>
<p>Browsing <a href="http://10.10.10.75/nibbleblog">http://10.10.10.75/nibbleblog</a> leads us to the homepage of the blog, which contains nothing of value. Or does it?</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542088176_2.png" /></p>
<p>Pretty strange that an image would have a .php extension indeed. Searching for vulns related to nibbleblog quickly leads to a related CVE: CVE-2015-6967</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542107275_3.png" /></p>
<p>And indeed, following the mentioned URL on our target leads to something worthwhile:</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542126158_4.png" /></p>
<p>We can go through all parent directories from this URL, even though they're supposed to remain private. Does it mean that other directories are exposed?
Yes, yes it does.</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542164787_5.png" /></p>
<p>Let's explore. The /admin/boot/rules/ path gives us a set of rules and settings related to the CMS, one of them confirming that this version of nibbleblog is indeed absolutely vulnerable, according to all the CVEs found earlier:</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542188280_6.png" /></p>
<p>Looking back to the /content directories, we can also see that the admin's username is indeed... admin.</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542205151_7.png" /></p>
<p>We could fire up hydra to get access to the dashboard, but a blacklist system exists in this CMS, which would make bruteforcing worthless for us:</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542241708_8.png" /></p>
<p>At this point I honestly got lost: even if the CMS' config and settings are widely exposed, there is nothing that could gives us the admin's password. Which we need to make use of that CVE later on!</p>
<p>After browsing all the files scratching my head, I gave up and googled some write-ups: turns out the admin's password is just... nibbles.
Yeah. Sometimes it's just better to follow your instinct rather than looking for something fancy. Anyway, let’s move on…</p>
<p>Executing CVE-2015-6967 can easily be done with the instructions found here: <a href="https://curesec.com/blog/article/blog/NibbleBlog-403-Code-Execution-47.html">https://curesec.com/blog/article/blog/NibbleBlog-403-Code-Execution-47.html</a></p>
<p>Here are the steps to follow:</p>
<ul>
<li>Go to <a href="http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;action=list">http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;action=list</a> and click on "Install" for My image plugin</li>
<li>Fill up the fields with anything you want and upload a PHP web shell instead of an image</li>
<li>Ignore warning while uploading</li>
<li>Go to <a href="http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php">http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php</a> and enjoy your web shell!</li>
</ul>
<p>For this purpose I used the following web shell, nice and simple: <a href="https://github.com/nickola/web-console">https://github.com/nickola/web-console</a></p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542282386_9.png" /></p>
<p>The user flag can now be reached: <strong>b02ff32bb332deba49eeaed21152c8d8</strong>
For the root one, we're gonna need some additional privesc. Running <strong>sudo -l</strong> yields something interesting:</p>
<p><img alt="" src="https://ovelny.sh/static/images/hack-the-box-writeup-nibbles/s_176EB22770684CE253C2829BBED040B5405102CAF5E10F54FC870A1649049458_1582542321101_10.png" /></p>
<p>Our current user can run <strong>monitor.sh</strong> at the given path as sudo without any password! We just need to make that script outputs the root flag and we will be done:</p>
<ul>
<li><strong>mkdir -p /home/nibbler/personal/stuff</strong></li>
<li><strong>touch /home/nibbler/personal/stuff/monitor.sh</strong></li>
<li><strong>chmod +x /home/nibbler/personal/stuff/monitor.sh</strong></li>
<li><strong>echo "#!/bin/bash" &gt; /home/nibbler/personal/stuff/monitor.sh</strong></li>
<li><strong>echo "cat /root/root.txt" &gt;&gt; /home/nibbler/personal/stuff/monitor.sh</strong></li>
<li><strong>cd /home/nibbler/personal/stuff/</strong></li>
<li><strong>sudo ./monitor.sh</strong></li>
</ul>
<p>And the root flag is now ours: <strong>b6d745c0dfb6457c55591efc898ef88c</strong></p>]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Easy tunneling with sshuttle]]></title>
        <link href="https://ovelny.sh/blog/easy-tunneling-with-sshuttle/"/>
        <updated>2019-10-24T00:00:00+02:00</updated>
        <id>https://ovelny.sh/blog/easy-tunneling-with-sshuttle/</id>
        <content type="html"><![CDATA[<p>Sshuttle is a genius program that allows you to tunnel all of your traffic through SSH. As a result, it can act as a VPN for any machine you can SSH to. You don't even need to be an admin of the distant server to achieve this. How amazing is that?</p>
<p>Here's what we want to achieve through SSH tunneling:</p>
<ul>
<li>easily redirect all traffic through the SSH tunnel, DNS and all UDP traffic included</li>
<li>automate even more the process with some scripting</li>
</ul>
<p>Here's what we want to <strong>avoid</strong> by using sshuttle:</p>
<ul>
<li>wasting hours configuring things on the server acting as a proxy</li>
<li>creating a new connection through nmcli rather than being tunneled automatically</li>
<li>messing things up by misconfiguring something, OpenVPN being a good example of this.</li>
</ul>
<p>We'll still have to make a reasonably configured server for our proxy, but this will take way less time than setting up a VPN with any other tool. Let's get started, with a digitalocean VPS.</p>
<h2>Setting up a digitalocean VPS with sane defaults</h2>
<p>First of all, create your droplet on digitalocean. Even if this would work for many linux flavor, this tutorial will use ubuntu. Pick the latest LTS version and choose to create a $5 droplet, which will be more than enough for a proxy.</p>
<p>Choose to paste your SSH public key to login in the settings. A one time password is hardly secure nor a good idea.</p>
<p>Once your droplet is up and online, connect with SSH:</p>
<div class="codehilite"><pre><span></span><code>ssh root@my-droplet-ip
</code></pre></div>


<p>First thing you should do is updating this freshly created server:</p>
<div class="codehilite"><pre><span></span><code>apt-get update
</code></pre></div>


<p>Then, we should work on disabling root access. Let's create a new user on this server:</p>
<div class="codehilite"><pre><span></span><code>adduser your-user
</code></pre></div>


<p>Give it a strong password during the creation process. Next, add this user to the sudo group:</p>
<div class="codehilite"><pre><span></span><code>usermod -aG sudo your-user
</code></pre></div>


<p>And while we're at it, enable ufw (Uncomplicated FireWall). We're gonna use it later on:</p>
<div class="codehilite"><pre><span></span><code>ufw <span class="nb">enable</span>
</code></pre></div>


<p>We wanna connect through SSH with the user we just created. Just as the same way we provided our public key during the droplet creation, we now have to repeat this process for the new user. First, switch from root to the user:</p>
<div class="codehilite"><pre><span></span><code>su - your-user
</code></pre></div>


<p>And then, create a .ssh folder with the appropriate permissions:</p>
<div class="codehilite"><pre><span></span><code>mkdir ~/.ssh
chmod <span class="m">700</span> ~/.ssh
</code></pre></div>


<p>On your <strong>client</strong> (not the server!), run the following command to get the output of your public key:</p>
<div class="codehilite"><pre><span></span><code>cat ~/.ssh/id_rsa.pub
</code></pre></div>


<p>Then paste it in the following file on the server:</p>
<div class="codehilite"><pre><span></span><code>vim ~/.ssh/authorized_keys
</code></pre></div>


<p>Save the file and exit, and change again the permissions to restrict access to the file:</p>
<div class="codehilite"><pre><span></span><code>chmod <span class="m">600</span> ~/.ssh/authorized_keys
</code></pre></div>


<p>Now return to the root user:</p>
<div class="codehilite"><pre><span></span><code><span class="nb">exit</span>
</code></pre></div>


<p>The last step with SSH is to edit sshd_config in order to restrict the access via the created user and the corresponding public key:</p>
<div class="codehilite"><pre><span></span><code>vim /etc/ssh/sshd_config
</code></pre></div>


<p>Look up and change appropriately the following lines in this file. Make sure they are not commented as well (not beginning with <strong>#</strong>):</p>
<div class="codehilite"><pre><span></span><code>PasswordAuthentication no
PubkeyAuthentication yes
ChallengeResponseAuthentication no
PermitRootLogin no
</code></pre></div>


<p>We're almost done, but keep in mind that we have to allow incoming SSH connections with ufw:</p>
<div class="codehilite"><pre><span></span><code>ufw limit ssh/tcp
</code></pre></div>


<p>The <strong>limit</strong> setting here will ban any IP attempting and failing to connect repeatedly. Combined with our changes on sshd_config, this is more than enough to protect this opened port.</p>
<p>Last step for good measure is upgrading the system and rebooting the server:</p>
<div class="codehilite"><pre><span></span><code>apt-get dist-upgrade <span class="o">&amp;&amp;</span> shutdown -r now
</code></pre></div>


<p>After reboot, make sure that you cannot SSH to the server with root, and connect with the created user instead:</p>
<div class="codehilite"><pre><span></span><code>ssh your-user@my-droplet-ip
</code></pre></div>


<p>We're 100% done with our server, unless you're interested in the misc part at the end of this article. Let's move on to the client side.</p>
<h2>Setting up sshuttle</h2>
<p>Sshuttle is already available on most package managers. On archlinux, you can easily get it with <code>yay</code>:</p>
<div class="codehilite"><pre><span></span><code>yay sshuttle
</code></pre></div>


<p>Keep in mind that sshuttle doesn't tunnel UDP traffic (except DNS) by default. A bit of extra work is needed on that part with tproxy, as described in the documentation: <a href="https://sshuttle.readthedocs.io/en/stable/tproxy.html">https://sshuttle.readthedocs.io/en/stable/tproxy.html</a></p>
<p>Basically it boils down to the following steps:</p>
<ul>
<li>run the following command as root after booting up:</li>
</ul>
<div class="codehilite"><pre><span></span><code>ip route add <span class="nb">local</span> default dev lo table <span class="m">100</span>
ip rule add fwmark <span class="m">1</span> lookup <span class="m">100</span>
ip -6 route add <span class="nb">local</span> default dev lo table <span class="m">100</span>
ip -6 rule add fwmark <span class="m">1</span> lookup <span class="m">100</span>
</code></pre></div>


<ul>
<li>run sshuttle as root with the tproxy method:</li>
</ul>
<div class="codehilite"><pre><span></span><code>sudo <span class="nv">SSH_AUTH_SOCK</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$SSH_AUTH_SOCK</span><span class="s2">&quot;</span> sshuttle --method<span class="o">=</span>tproxy <span class="se">\</span>
                                             --disable-ipv6 <span class="se">\</span>
                                             --dns <span class="se">\</span>
                                             --exclude your-server-ip <span class="se">\</span>
                                             -r your-user@your-server-ip <span class="m">0</span>/0
</code></pre></div>


<p>That one is quite a mouthful so let's break it down:</p>
<ul>
<li><code>SSH_AUTH_SOCK="$SSH_AUTH_SOCK"</code> ensures that you can connect normally with SSH despise running sshuttle as root</li>
<li><code>--method=tproxy</code> is here to, well, activate the tproxy method for UDP traffic</li>
<li><code>--disable-ipv6</code> is self-explanatory. Sadly, I found that my ipv6 address would leak otherwise, and I'm not sure what is causing this at the moment.</li>
<li><code>--dns</code> is to forward all DNS requests through SSH</li>
<li><code>--exclude your-server-ip</code> is required when forwarding all your traffic with tproxy, to prevent sshuttle from intercepting SSH packets</li>
<li><code>-r your-user@your-server-ip 0/0</code> finally, where to forward your entire traffic (represented here as 0/0)</li>
</ul>
<p>Since ipv6 can leak even with the <code>--disable-ipv6</code> command, let's disable it while using sshuttle. This can be achieved temporarily by running the following commands as root:</p>
<div class="codehilite"><pre><span></span><code>sudo sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span><span class="m">1</span>
sudo sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span><span class="m">1</span>
sudo sysctl -w net.ipv6.conf.lo.disable_ipv6<span class="o">=</span><span class="m">1</span>
</code></pre></div>


<p>This is all nice and well but I don't see myself running all of this at each boot, so let's wrap everything we mentioned in a script:</p>
<div class="codehilite"><pre><span></span><code><span class="ch">#!/usr/bin/env bash</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$EUID</span><span class="s2">&quot;</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&quot;This script must be run as root. Exiting.&quot;</span>
    <span class="nb">exit</span>
<span class="k">fi</span>

ip route add <span class="nb">local</span> default dev lo table <span class="m">100</span>
ip rule add fwmark <span class="m">1</span> lookup <span class="m">100</span>
ip -6 route add <span class="nb">local</span> default dev lo table <span class="m">100</span>
ip -6 rule add fwmark <span class="m">1</span> lookup <span class="m">100</span>

sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span><span class="m">1</span>
sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span><span class="m">1</span>
sysctl -w net.ipv6.conf.lo.disable_ipv6<span class="o">=</span><span class="m">1</span>

sshuttle --method<span class="o">=</span>tproxy <span class="se">\</span>
    --disable-ipv6 <span class="se">\</span>
    --dns <span class="se">\</span>
    -e <span class="s2">&quot;sudo -u your-user ssh&quot;</span> <span class="se">\</span>
    --daemon <span class="se">\</span>
    --pidfile<span class="o">=</span>/home/your-user/sshuttle.pid <span class="se">\</span>
    --exclude your-server-ip <span class="se">\</span>
    -r your-user@your-server-ip <span class="m">0</span>/0
</code></pre></div>


<p>Three options have been added here:</p>
<ul>
<li><code>--daemon</code> to run sshuttle in background</li>
<li><code>--pidfile</code> to put a file containing shuttle's PID in a defined path. Change the latter according to your needs.</li>
</ul>
<p>The <code>-e</code> flag will allow you to run the command as your main user and prompt for your ssh passphrase. This will use the right ssh pubkey to connect, even if ssh-agent isn't loaded yet and sshuttle is ran as root.</p>
<p>Stopping the VPN is easy: just <code>kill</code> the PID given in <code>sshuttle.pid</code>. This can be automated with the following alias, ran as root:</p>
<div class="codehilite"><pre><span></span><code><span class="nb">alias</span> <span class="nv">vpndown</span><span class="o">=</span><span class="s2">&quot;kill &#39;</span><span class="k">$(</span>cat /home/your-user/sshuttle.pid<span class="k">)</span><span class="s2">&#39;&quot;</span>
</code></pre></div>


<p>You should now be all set, just by adding the previous script in your <code>$PATH</code>.</p>
<h2>Misc: accessing the VPN when the SSH port is blocked</h2>
<p>If you want to connect on WiFi hotspots, you might want to change the SSH port to 443 on your server as it is nearly guaranteed to be always opened, no matter how strict the WiFi's firewall is.</p>
<p>We have to change SSH's default port on our server:</p>
<div class="codehilite"><pre><span></span><code>vim /etc/ssh/sshd_config
</code></pre></div>


<p>Find and change the following line accordingly. Uncomment it if necessary:</p>
<div class="codehilite"><pre><span></span><code>Port 443
</code></pre></div>


<p>One thing left now is to change ufw rules on your server to open that port:</p>
<div class="codehilite"><pre><span></span><code>sudo ufw limit in <span class="m">443</span>/tcp
</code></pre></div>


<p>Don't forget to remove port 22 on ufw:</p>
<div class="codehilite"><pre><span></span><code>sudo ufw status numbered
</code></pre></div>


<p>Delete related rules with their IDs:</p>
<div class="codehilite"><pre><span></span><code>sudo ufw delete &lt;rule-id-here&gt;
</code></pre></div>


<p>Now restart the sshd service:</p>
<div class="codehilite"><pre><span></span><code>sudo service sshd restart
</code></pre></div>


<p>Now, the only thing left is to specify the 443 port in the sshuttle script:</p>
<div class="codehilite"><pre><span></span><code>-r your-user@your-server-ip:443 0/0
</code></pre></div>


<p>The VPN should now be accessible from almost everywhere.</p>]]></content>
    </entry>
    

</feed>